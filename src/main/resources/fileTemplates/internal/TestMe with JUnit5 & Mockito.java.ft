#parse("TestMe macros.java")
#if($PACKAGE_NAME)
package ${PACKAGE_NAME};
#end

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
#if(!$TESTED_CLASS_FIELDS.isEmpty())
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
//import static org.mockito.Mockito.*;
#end
#parse("File Header.java")
class ${CLASS_NAME} {
#renderMockedFields($TESTED_CLASS_FIELDS)
#renderTestSubjectInit($TESTED_CLASS,$TESTED_CLASS_FIELDS.isEmpty())
#if(!$TESTED_CLASS_FIELDS.isEmpty())

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }
#end
#foreach($method in $TESTED_CLASS_METHODS)
#if($method.isTestable())

    @Test
    void #renderTestMethodName($method.name)(){
        #renderMethodCall($method,$TESTED_CLASS.name)
#if($method.returnType && $method.returnType.name !="void")        Assertions.#renderJUnitAssert($method.returnType)#end
    }
#end
#end
}

#parse("TestMe Footer.java")