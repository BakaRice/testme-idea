#macro( deCapitalize $str)$str.substring(0,1).toLowerCase()$str.substring(1)#end
#macro( capitalize $str)$str.substring(0,1).toUpperCase()$str.substring(1)#end
#macro( renderJavaCallParams $params)
    #foreach($param in $params)
            #if($foreach.count>1),#end #renderJavaCallParam($param.type,$param.name)#end
#end
#macro( renderJavaCallParam $type $strValue )
    #if($type.canonicalName == "java.lang.String")
        "${strValue}"#else
    new ${type.name}()#end
#end
#macro( renderJavaTestClassImports $fields $methods $package)
    #foreach($field in $fields)
        #renderImport($field.type.canonicalName,$package)
    #end
    #foreach($method in $methods)
        #if($method.ownerClassCanonicalType!="java.lang.Object")
            #if($method.returnType)
                #renderImport($method.returnType.canonicalName,$package)#end
            #foreach($param in $method.methodParams)
                #renderImport($param.type.canonicalName,$package)
            #end
        #end
    #end
#end
#macro(renderImport $canonicalName $package)
##    #if(!$canonicalName.matches("java\\.lang\\.[^.]*"))
    #if(!$canonicalName.startsWith("java.lang.")) ## TODO ... && $canonicalName does not belong to $package
        import $canonicalName;
    #end
#end
#macro(renderJavaReturnVar $type)
    #if($type)$type.name result = #end
#end
#macro(renderJUnitAssert $type)
    #if($type)Assert.assertEquals(#renderJavaCallParam($type,"replaceMeWithExpectedResult"), result);#end
#end