################## Global vars ###############
#set($trackedImports={})## map (name -> canonicalName) of types allready imported
#foreach($typeName in $TESTED_CLASS_TYPES_IN_DEFAULT_PACKAGE)#set( $devNull= $trackedImports.put($typeName,""))#end
#set($trackedTestMethodsCount={})
##
################## Macros #####################
#macro( deCapitalize $str)$str.substring(0,1).toLowerCase()$str.substring(1)#end
##
#macro( capitalize $str)$str.substring(0,1).toUpperCase()$str.substring(1)#end
##
#macro( renderJavaCallParams $params)#*
    *##foreach($param in $params)#*
        *##if($foreach.count>1), #end#*
        *##if($param.type.array)new #renderTypeName($param.type)[]{#end#renderJavaCallParam($param.type,$param.name)#if($param.type.array)}#end#end
#end
##
#macro( renderJavaCallParam $type $strValue )##
#if($type.canonicalName == "java.lang.String")"${strValue}"##
#elseif($type.canonicalName == "byte")(byte) 0##
#elseif($type.canonicalName == "short")(short) 0##
#elseif($type.canonicalName == "int")0##
#elseif($type.canonicalName == "long")0L##
#elseif($type.canonicalName == "float")0f##
#elseif($type.canonicalName == "double")0d##
#elseif($type.canonicalName == "char")'a'##
#elseif($type.canonicalName == "boolean")true##
#elseif($type.canonicalName == "java.lang.Byte")Byte.valueOf("00110")##
#elseif($type.canonicalName == "java.lang.Short")Short.valueOf((short)0)##
#elseif($type.canonicalName == "java.lang.Integer")Integer.valueOf(0)##
#elseif($type.canonicalName == "java.lang.Integer")Integer.valueOf(0)##
#elseif($type.canonicalName == "java.lang.Long")Long.valueOf(1)##
#elseif($type.canonicalName == "java.lang.Float")Float.valueOf(1.1f)##
#elseif($type.canonicalName == "java.lang.Double")Double.valueOf(0)##
#elseif($type.canonicalName == "java.lang.Character")Character.valueOf('a')##
#elseif($type.canonicalName == "java.lang.Boolean")Boolean.TRUE##
#elseif($type.canonicalName == "java.math.BigDecimal")new java.math.BigDecimal(0)##
#{else}new #renderTypeName($type)()#end
#end
##
#macro( renderTypeName $type)#*
    *##if($type.packageName.length()>0 && $type.packageName != "java.lang" && $type.packageName != $package && !($trackedImports.get($type.name)==${type.canonicalName}))${type.canonicalName}#*
    *##{else}$type.name#end
#end
##
#macro( renderJavaTestClassImports $fields $methods $package)
#foreach($field in $fields)
#renderImport($field.type,$package)
#end
#foreach($method in $methods)#*
    *##if($method.isTestable())#*
        *##if($method.returnType)#*
            *##renderImport($method.returnType,$package)#end#*
        *##foreach($param in $method.methodParams)#*
            *##renderImport($param.type,$package)#end#*
    *##end
#end
#end
##
#macro(renderImport $wrapperType $package)
#foreach($type in $wrapperType.composedTypes)#*
    *##if($type.packageName.length()>0 && $type.packageName != "java.lang" && $type.packageName != $package && !$trackedImports.get($type.name))#*
    *#import $type.canonicalName;
#*  *##set($devNull=$trackedImports.put($type.name,$type.canonicalName))#*
    *##end##
#end##
#end##
##
#macro(renderMockedFields $testedClassFields)
#foreach($field in $testedClassFields)
#if(!${field.type.primitive} && !${field.finalType} && !${field.overridden} && !$field.type.array)
    @Mock
    private #renderTypeName($field.type) $field.name;
#end
#if(!${field.type.primitive} && ${field.finalType} && (!$field.static || !$field.final))
    //TODO Field $field.name of type $field.type.name - was not mocked since Mockito doesn't mock a Final class
#end
#if($field.type.array && (!$field.static || !$field.final))
    //TODO Field $field.name of type ${field.type.name}[] - was not mocked since Mockito doesn't mock arrays
#end
#end
#end
##
#macro(renderJavaReturnVar $type)
#if($type && $type.name !="void")$type.name result = #end
#end
##
#macro(renderJUnitAssert $type)
#if($type && $type.name !="void")        Assert.assertEquals(#renderJavaCallParam($type,"replaceMeWithExpectedResult"), result);
#end
#end
##
#macro(renderTestMethods $testedClassMethods $testedClassName)
#foreach($method in $testedClassMethods)
#if($method.isTestable())

    @Test
    public void #renderTestMethodName($method.name)() throws Exception {
        #renderJavaReturnVar($method.returnType)#deCapitalize($testedClassName).${method.name}(#renderJavaCallParams($method.methodParams));
#renderJUnitAssert($method.returnType)
    }
#end
#end
#end
##
#macro(renderTestMethodName $methodName)
test#capitalize($methodName)#testMethodSuffix($methodName)
#end
##
#macro(testMethodSuffix $methodName)
#if( $trackedTestMethodsCount.get($methodName))
    #set( $suffix= $trackedTestMethodsCount.get($methodName))
#else
    #set( $suffix= 0)
#end
#set( $suffix= $suffix + 1)
#set( $devNull= $trackedTestMethodsCount.put($methodName,$suffix))
#if($suffix!=1)${suffix}#end
#end