#parse("TestMe macros.java")
#if($PACKAGE_NAME)
package ${PACKAGE_NAME};
#end

#renderJavaTestClassImports($TESTED_CLASS_FIELDS,$TESTED_CLASS_METHODS,$PACKAGE_NAME)
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
#parse("File Header.java")

public class ${CLASS_NAME} {
#foreach($field in $TESTED_CLASS_FIELDS)
    #if(!${field.type.primitive} && !${field.type.final})
        @Mock
        private $field.type.name $field.name;
    #end
    #if(!${field.type.primitive} && ${field.type.final})
        //TODO Field $field.name of type $field.type.name - was not mocked since Mockito doesn't mock a Final class
    #end
#end
#if(!$TESTED_CLASS_FIELDS.isEmpty())
    @InjectMocks
    private $TESTED_CLASS_NAME #deCapitalize($TESTED_CLASS_NAME);
#else
    private ${TESTED_CLASS_NAME} #deCapitalize($TESTED_CLASS_NAME)=new ${TESTED_CLASS_NAME}();
#end
#if(!$TESTED_CLASS_FIELDS.isEmpty())
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }
#end
#foreach($method in $TESTED_CLASS_METHODS)
#if($method.ownerClassCanonicalType!="java.lang.Object")
    @Test
    public void test#capitalize($method.name)() throws Exception{
        #renderJavaReturnVar($method.returnType)#deCapitalize($TESTED_CLASS_NAME).${method.name}(#renderJavaCallParams($method.methodParams));
        #renderJUnitAssert($method.returnType)
    }
#end
#end
}

//Generated with love by TestMe :) Please report issues and submit feature requests at: https://github.com/yaronyam/testme-intellij/issues