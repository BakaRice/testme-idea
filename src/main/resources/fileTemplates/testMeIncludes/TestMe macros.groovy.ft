################## Global vars ###############
#set($trackedTestMethodsCount={})
#set($replacementTypes = {
    "java.util.Collection": "[<VAL>]",
    "java.util.Deque": "new LinkedList([<VAL>])",
    "java.util.List": "[<VAL>]",
    "java.util.Map": "[<VAL>:<VAL>]",
    "java.util.NavigableMap": "new java.util.TreeMap([<VAL>:<VAL>])",
    "java.util.NavigableSet": "new java.util.TreeSet([<VAL>])",
    "java.util.Queue": "new java.util.LinkedList<TYPES>([<VAL>])",
    "java.util.RandomAccess": "new java.util.Vector([<VAL>])",
    "java.util.Set": "[<VAL>] as java.util.Set<TYPES>",
    "java.util.SortedSet": "[<VAL>] as java.util.SortedSet<TYPES>",
    "java.util.LinkedList": "new java.util.LinkedList<TYPES>([<VAL>])",
    "java.util.ArrayList": "[<VAL>]",
    "java.util.HashMap": "[<VAL>:<VAL>]",
    "java.util.TreeMap": "new java.util.TreeMap<TYPES>([<VAL>:<VAL>])",
    "java.util.LinkedList": "new java.util.LinkedList<TYPES>([<VAL>])",
    "java.util.Vector": "new java.util.Vector([<VAL>])",
    "java.util.HashSet": "[<VAL>] as java.util.HashSet",
    "java.util.LinkedHashMap": "[<VAL>:<VAL>]",
    "java.util.TreeSet": "[<VAL>] as java.util.TreeSet"
})
#set($defaultTypeValues = {
    "byte": "(byte) 0",
    "short": "(short) 0",
    "int": "0",
    "long": "0L",
    "float": "0f",
    "double": "0d",
    "char": "'a'",
    "boolean": "true",
    "java.lang.Byte": "Byte.valueOf(""00110"")",
    "java.lang.Short": "Short.valueOf((short)0)",
    "java.lang.Integer": "Integer.valueOf(0)",
    "java.lang.Integer": "Integer.valueOf(0)",
    "java.lang.Long": "Long.valueOf(1)",
    "java.lang.Float": "Float.valueOf(1.1f)",
    "java.lang.Double": "Double.valueOf(0)",
    "java.lang.Character": "Character.valueOf('a')",
    "java.lang.Boolean": "Boolean.TRUE",
    "java.math.BigDecimal": "new java.math.BigDecimal(0)",
    "java.util.Date": "new java.util.GregorianCalendar($YEAR, java.util.Calendar.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC, $HOUR_NUMERIC, $MINUTE_NUMERIC).getTime()",
    "java.time.LocalDate": "java.time.LocalDate.of($YEAR, java.time.Month.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC)",
    "java.time.LocalDateTime": "java.time.LocalDateTime.of($YEAR, java.time.Month.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC, $HOUR_NUMERIC, $MINUTE_NUMERIC, $SECOND_NUMERIC)",
    "java.time.LocalTime": "java.time.LocalTime.of($HOUR_NUMERIC, $MINUTE_NUMERIC, $SECOND_NUMERIC)",
    "java.io.File": "new File(getClass().getResource(""/$PACKAGE_NAME.replace('.','/')/PleaseReplaceMeWithTestFile.txt"").getFile())",
    "java.lang.Class": "Class.forName(""$TESTED_CLASS.canonicalName"")"
})
##
##
################## Macros #####################
#macro(renderTestSubjectInit $testedClass $hasNoMembers)
#if($hasNoMembers || $testedClass.parent)
#if(!$hasNoMembers && $testedClass.parent)      @InjectMocks#else

#end
    $testedClass.canonicalName $StringUtils.deCapitalizeFirstLetter($testedClass.name)= #renderInitClass($testedClass)
#else
    @InjectMocks
    $testedClass.canonicalName $StringUtils.deCapitalizeFirstLetter($testedClass.name)
#end
#end
##
#macro(renderInitClass $class)
#if($class.parent)#renderInitClass($class.parent).#end#if(!$class.isStatic())new #end$class.name#if(!$class.isStatic() && $class.parent || !$class.child || !$class.child.isStatic())()#end
#end
##
#macro(renderMockedFields $testedClassFields)
#foreach($field in $testedClassFields)
#if(!${field.type.primitive} && !${field.finalType} && !${field.overridden} && !$field.type.array && !$field.type.enum)
    @Mock
    $field.type.canonicalName $field.name
#elseif(!$field.type.primitive && !($field.type.canonicalName == "java.lang.String") && $field.finalType && (!$field.static || !$field.final))
    //Field $field.name of type $field.type.name - was not mocked since Mockito doesn't mock a Final class
#elseif($field.type.array && (!$field.static || !$field.final))
    //Field $field.name of type ${field.type.name}[] - was not mocked since Mockito doesn't mock arrays
#elseif($field.type.enum)
    //Field $field.name of type ${field.type.name} - was not mocked since Mockito doesn't mock enums
#end
#end
#end
##
#macro(renderJavaReturnVar $type)
#if($type && $type.name !="void")$type.canonicalName#if($type.array)[]#end result = #end
#end
##
#macro(renderGRAssert $type)
assert result == $TestBuilder.renderJavaCallParam($type,"replaceMeWithExpectedResult",$replacementTypes,$defaultTypeValues ,0)
#end
##
#macro(renderMethodCall $method,$testedClassName)
#renderJavaReturnVar($method.returnType)#if($method.static)$testedClassName#{else}$StringUtils.deCapitalizeFirstLetter($testedClassName)#end.${method.name}($TestBuilder.renderJavaCallParams($method.methodParams,$replacementTypes,$defaultTypeValues , 0))
#end
##
#macro(renderTestMethodName $methodName)
test$StringUtils.capitalizeFirstLetter($methodName)#testMethodSuffix($methodName)
#end
##
#macro(testMethodSuffix $methodName)
#if( $trackedTestMethodsCount.get($methodName))
    #set( $suffix= $trackedTestMethodsCount.get($methodName))
#else
    #set( $suffix= 0)
#end
#set( $suffix= $suffix + 1)
#set( $devNull= $trackedTestMethodsCount.put($methodName,$suffix))
#if($suffix!=1)${suffix}#end
#end