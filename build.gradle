import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

plugins {
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version '4.1.0'
    id "io.freefair.lombok" version "8.3"
    id("org.jetbrains.intellij.platform") version "2.0.1"
}

apply plugin: 'groovy'
apply plugin: 'java'

def enableIdeaGroovyPlugin=Boolean.valueOf(enableIdeaGroovyPlugin)
def groovyOn = enableIdeaGroovyPlugin ? 'enabled':'disabled'
def enableIdeaScalaPlugin=Boolean.valueOf(enableIdeaScalaPlugin)
def scalaOn = enableIdeaScalaPlugin ? 'enabled':'disabled'

println "*****************************************************************************************************************************************************************"
println "              Running build for ideaVersion: $ideaVersion and scalaPluginVersion: $scalaPluginVersion with Groovy plugin ${groovyOn} and Scala plugin ${scalaOn}"
println "*****************************************************************************************************************************************************************"
def isRunInCI=Boolean.valueOf(System.getenv('CI'))

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

allprojects {
    sourceCompatibility = jvmTargetVersion
    targetCompatibility = jvmTargetVersion
    repositories {
        mavenCentral()
    }
    jacoco {
        toolVersion = "0.8.11"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        if (!javaHome) {
            println "javaHome var not set. setting java home from JAVA_HOME env var"
            javaHome = System.getenv().JAVA_HOME //            javaHome =  'C:\\Program Files\\AdoptOpenJDK\\jdk-13.0.2.8-hotspot'
        }
        println "JAVA_HOME=$javaHome"
    }
    testSets {
        integrationTest
    }
    integrationTest {
        afterTest { desc, result ->
            println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
        }
        reports.html.required = !isRunInCI
//        exclude '**/TestMeGenerator*'  //temp exclude. for shortening build time when testing build changes
//        include '**/utils/TestSubjectResolverUtilsTest.class'  //temp exclude
        jacoco {
            includeNoLocationClasses = true
            excludes = ["jdk.internal.*"]
        }
    }
    tasks.withType(Test) {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'enableIdeaGroovyPlugin', enableIdeaGroovyPlugin
        systemProperty 'enableIdeaScalaPlugin', enableIdeaScalaPlugin
        reports.html.destination = file("${reporting.baseDir}/${name}")
        testLogging {
            exceptionFormat = TestExceptionFormat.FULL
//            events TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
            events TestLogEvent.values()
            showStandardStreams = true
        }
    }
}

jacocoTestReport {
    dependsOn test
    classDirectories.setFrom(instrumentCode)
    reports {
        xml.required = true
        html.required = !isRunInCI
    }
    classDirectories.from = files(classDirectories.files.collect {
        fileTree(dir: it, exclude: 'com/weirddev/testme/intellij/ui/**')
    })
    outputs.upToDateWhen { false } // Always generate report
}
def shouldInstrumentCode = !Boolean.valueOf(System.getProperty('skipCodeInstrumentation', 'false'))
intellijPlatform {
    projectName = 'TestMe'
    instrumentCode = shouldInstrumentCode
    pluginConfiguration {
        id = group
        name = 'TestMe'
        version = testMeVersion
        ideaVersion {
            sinceBuild = '232'
//           untilBuild = '242.*'
        }
    }
    publishing {
        token = System.getenv("ORG_GRADLE_PROJECT_intellijPublishToken")
        channels = [ideaPublishChannel]
    }
}
dependencies {
    intellijPlatform {
        create(providers.gradleProperty("ideaType"), providers.gradleProperty("ideaVersion"))
        bundledPlugins(["org.intellij.groovy"])
        plugins(["org.intellij.scala:" + scalaPluginVersion])
        instrumentationTools()
//        pluginVerifier()
//        zipSigner()
//    pluginVerification {
//        freeArgs = listOf(
//                "-mute",
//                "TemplateWordInPluginId,ForbiddenPluginIdPrefix"
//        )
//    }
//        testFramework(TestFrameworkType.Platform.INSTANCE)
        testFramework(TestFrameworkType.JUnit5.INSTANCE)
        testFramework(TestFrameworkType.Plugin.Java.INSTANCE)
        pluginModule(implementation(project(':testme-intellij-common')))
        pluginModule(implementation(project(':testme-intellij-groovy')))
        pluginModule(implementation(project(':testme-intellij-scala')))
    }

//    implementation(project(':testme-intellij-common')) {
//        exclude group: 'com.jetbrains', module: 'ideaIC'
//        exclude group: 'org.jetbrains.plugins', module: 'junit'
//        exclude group: 'org.jetbrains.plugins', module: 'properties'
//        exclude group: 'org.jetbrains.plugins', module: 'Groovy'
//    }
//    implementation(project(':testme-intellij-groovy')) {
//        exclude group: 'com.jetbrains', module: 'ideaIC'
//        exclude group: 'org.jetbrains.plugins', module: 'junit'
//        exclude group: 'org.jetbrains.plugins', module: 'properties'
//        exclude group: 'org.jetbrains.plugins', module: 'Groovy'
//    }
//    implementation(project(':testme-intellij-scala')) {
//        exclude group: 'com.jetbrains', module: 'ideaIC'
//        exclude group: 'org.jetbrains.plugins', module: 'junit'
//        exclude group: 'org.jetbrains.plugins', module: 'properties'
//        exclude group: 'org.jetbrains.plugins', module: 'Groovy'
//        exclude group: 'org.jetbrains.plugins', module: 'Scala'
//    }
//
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation("org.spockframework:spock-core:2.3-groovy-3.0")
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

def disabledPlugins = []
if (!enableIdeaScalaPlugin) {
    disabledPlugins += "org.intellij.scala"
}
if (!enableIdeaGroovyPlugin) {
    disabledPlugins += "org.intellij.groovy"
}
intellijPlatformTesting.testIde {
    testCustomSetup {
        plugins  {
            println "disablePlugins: "+disabledPlugins
            disablePlugins(disabledPlugins)
        }
    }
}
tasks.test.configure {
    actions.clear()
    dependsOn('testCustomSetup')
}
tasks.named('testCustomSetup', Test) {
    afterTest { desc, result ->
        println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
    }
    reports.html.required = !isRunInCI
    jacoco {
        includeNoLocationClasses = true
        excludes = ["jdk.internal.*"]
    }
    useJUnitPlatform()
}

//tasks.register('jacocoRootReport', JacocoReport) {
//    description = 'Generates an aggregate report from all subprojects'
//    dependsOn check, jacocoMerge
//    additionalSourceDirs.from = files(testedProjects.sourceSets.main.allSource.srcDirs)
//    sourceDirectories.from = files(testedProjects.sourceSets.main.allSource.srcDirs)
////    classDirectories.from = files(testedProjects.sourceSets.main.output)
////    classDirectories.setFrom(instrumentCode)
//    classDirectories.setFrom(testedProjects.collect { it.instrumentCode })
//    //https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin-faq.html#jacoco-reports-0-coverage
////     executionData files(testedProjects*.tasks.withType(Test).executionData)
//    executionData jacocoMerge.destinationFile
//    reports {
//        xml.enabled true //isRunInCI
//        html.enabled !isRunInCI
//        html.destination file("${buildDir}/jacocoHtml")
//    }
//}
def javadocHeader = ""
task templateContextJavadocs(type: Javadoc, description: 'Generate javadocs for template context', group: 'Documentation') {
    dependsOn delombok
//    failOnError = false
    destinationDir = file("$buildDir/docs/templateContextJavadoc")
    title = "$project.name $version API"
    options.author true
    options.version true
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.links 'http://docs.oracle.com/javase/17/docs/api/'
    options.addStringOption 'Xdoclint:none', '-quiet'
    options.addBooleanOption "-allow-script-in-comments", true
    options.header  = javadocHeader
//    source = sourceSets.main.allJava
    source += delombok
//    classpath = configurations.compile  //should default to project.sourceSets.main.compileClasspath
//    classpath += configurations.runtimeClasspath
    include 'com/weirddev/testme/intellij/template/context/*'
    exclude 'com/weirddev/testme/intellij/template/context/impl*'

}

task allJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    dependsOn delombok
//    failOnError = false
    destinationDir = file("$buildDir/docs/allJavadoc")
    title = "$project.name $version API"
    options.author true
    options.version true
    options.links 'http://docs.oracle.com/javase/17/docs/api/'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addBooleanOption "-allow-script-in-comments", true
    options.header  = javadocHeader
    options.addStringOption 'Xdoclint:none', '-quiet'
    (subprojects+project).each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
        source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += "**/*.form"
            excludes += "**/*.flex"
        }
    }
}

