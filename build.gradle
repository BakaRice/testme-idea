import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version '4.1.0'
    id "io.freefair.lombok" version "8.3"
    id("org.jetbrains.intellij.platform") version "2.0.1"
    id("org.jetbrains.intellij.platform.migration") version "2.0.1"
}

def enableIdeaGroovyPlugin=Boolean.valueOf(enableIdeaGroovyPlugin)
def groovyOn = enableIdeaGroovyPlugin ? 'enabled':'disabled'
def enableIdeaScalaPlugin=Boolean.valueOf(enableIdeaScalaPlugin)
def scalaOn = enableIdeaScalaPlugin ? 'enabled':'disabled'

println "*****************************************************************************************************************************************************************"
println "              Running build for ideaVersion: $ideaVersion and scalaPluginVersion: $scalaPluginVersion with Groovy plugin ${groovyOn} and Scala plugin ${scalaOn}"
println "*****************************************************************************************************************************************************************"
def isRunInCI=Boolean.valueOf(System.getenv('CI'))
def testedProjects = subprojects + rootProject
repositories {
    mavenCentral()

    intellijPlatform {
        defaultRepositories()
    }
}

apply plugin: 'jacoco'

allprojects {
    sourceCompatibility = jvmTargetVersion
    targetCompatibility = jvmTargetVersion
    repositories {
        mavenCentral()
    }
    jacoco {
        toolVersion = "0.8.11"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        if (!javaHome) {
            println "javaHome var not set. setting java home from JAVA_HOME env var"
            javaHome = System.getenv().JAVA_HOME //            javaHome =  'C:\\Program Files\\AdoptOpenJDK\\jdk-13.0.2.8-hotspot'
        }
        println "JAVA_HOME=$javaHome"
    }
    testSets {
        integrationTest
    }

    integrationTest {
        afterTest { desc, result ->
            println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
        }
        reports.html.required = !isRunInCI
        jacoco {
            includeNoLocationClasses = true
            excludes = ["jdk.internal.*"]
        }
    }
    tasks.withType(Test) {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'enableIdeaGroovyPlugin', enableIdeaGroovyPlugin
        systemProperty 'enableIdeaScalaPlugin', enableIdeaScalaPlugin
        reports.html.destination = file("${reporting.baseDir}/${name}")
        testLogging {
            exceptionFormat = TestExceptionFormat.FULL
//            events TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
            events TestLogEvent.values()
            showStandardStreams = true
        }
    }
    test {
        afterTest { desc, result ->
            println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
        }
        reports.html.required = !isRunInCI
        jacoco {
            includeNoLocationClasses = true
            excludes = ["jdk.internal.*"]
        }
    }
}

def javadocHeader = ""
task templateContextJavadocs(type: Javadoc, description: 'Generate javadocs for template context', group: 'Documentation') {
    dependsOn delombok
//    failOnError = false
    destinationDir = file("$buildDir/docs/templateContextJavadoc")
    title = "$project.name $version API"
    options.author true
    options.version true
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.links 'http://docs.oracle.com/javase/17/docs/api/'
    options.addStringOption 'Xdoclint:none', '-quiet'
    options.addBooleanOption "-allow-script-in-comments", true
    options.header  = javadocHeader
//    source = sourceSets.main.allJava
    source += delombok
//    classpath = configurations.compile  //should default to project.sourceSets.main.compileClasspath
//    classpath += configurations.runtimeClasspath
    include 'com/weirddev/testme/intellij/template/context/*'
    exclude 'com/weirddev/testme/intellij/template/context/impl*'

}

task allJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    dependsOn delombok
//    failOnError = false
    destinationDir = file("$buildDir/docs/allJavadoc")
    title = "$project.name $version API"
    options.author true
    options.version true
    options.links 'http://docs.oracle.com/javase/17/docs/api/'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addBooleanOption "-allow-script-in-comments", true
    options.header  = javadocHeader
    options.addStringOption 'Xdoclint:none', '-quiet'
    (subprojects+project).each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
        source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += "**/*.form"
            excludes += "**/*.flex"
        }
    }
}

